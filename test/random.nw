% -*- mode: Noweb; noweb-code-mode: c++-mode -*-
%
% random.nw -- test for random numbers
%
% This file is part of glsim, a numerical simulation class library and
% helper programs.
%
% glsim is copyright (C) 2009, 2010, 2011, 2012, 2013, 2014
% by Tomas S. Grigera.
% 
% glsim is free software; you can redistribute it and/or modify it under
% the terms of the GNU General Public License (GPL) as published by the
% Free Software Foundation, with the additional requirements of
% attribution and nonmisrepresentation. You can use either version 3, or
% (at your option) any later version.
% 
% Additional terms under GNU GPL version 3 section 7:
% 
% When you redistribute this software, you are required to preserve its
% author attributions. If you distribute verbatim copies, you must not
% alter the AUTHORS file or attributions inserted in the source files,
% and you must not change the software's name. If you distribute a
% modified copy, then you must give clear notice that your work is
% different from but based on glsim. You must distribute it under a
% different name, but include a prominent notice specifying that "(your
% package) is based on glsim version x.x", and provide a pointer to the
% glsim distribution.
%
% glsim is distributed in the hope that it will be useful, but WITHOUT
% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
% or FITNESS FOR A PARTICULAR PURPOSE.
% 
% For details see the file LICENSE in the home directory. If the file is
% missing, contact the maintainers.
%
% '

@ \chapter{Random numbers}

<<rantest.cc>>=
#include <fstream>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>

#include <glsim/random.hh>

template <typename ranT>
void print_rn(glsim::random_distribution_base<ranT> &ran)
{
  std::cout << "Sequence of 10 random numbers:\n     ";
  for (int i=0; i<10; i++)
    std::cout << ran() << ' ';
  std::cout << '\n';
}

int main(int argc, char *argv[])
{
  glsim::random_number_generator RNG(gsl_rng_mt19937);
  glsim::uniform_integer ran(10);

  std::cout << "Using seed1\n";
  RNG.set_seed(3838);
  print_rn(ran);
  std::cout << "\nUsing seed2\n";
  RNG.set_seed(9981);
  print_rn(ran);
  std::cout << "\nUsing seed1 again\n";
  RNG.set_seed(3838);
  print_rn(ran);

  std::cout << "\n\nNow testing serialization:\n";
  std::cout << "First 10:\n";
  print_rn(ran);
  std::cout << "Save and second batch of 10:\n";
  {
    std::ofstream of("rng.bin",std::ios::binary);
    boost::archive::binary_oarchive oa(of);
    oa << RNG;
  }
  print_rn(ran);
  std::cout << "Read and batch:\n";
  {
    std::ifstream ifs("rng.bin",std::ios::binary);
    boost::archive::binary_iarchive ia(ifs);
    ia >> RNG;
  }
  print_rn(ran);

  return 0;
}
